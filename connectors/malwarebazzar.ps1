function MalwareBazzar-Connector {
    param(
        [string]$configPath = $PSScriptRoot + "\..\config\config.env"
    )

    $config = Read-ConfigFile -ConfigPath $configPath
    $databasePath = $config['DATABASE_PATH']
    $malwareBazzarApi = $config['MALWARE_BAZZAR_API_KEY']
    $selector = $config['SELECTOR']
    $newCount = 0

    $headers = @{
        'Auth-Key'    = $malwareBazzarApi
    }
    $params = @{
        'query' = 'get_recent'
        'selector' = $selector

    }
    $response = Invoke-RestMethod -Uri "https://mb-api.abuse.ch/api/v1/" -Method Post -Headers $headers -Body $params
    Write-Host "Download $($response.data.Count) Hashes"

    Import-Module PSSQLite

    foreach ($item in $response.data) {

        $parameters = @{
        SHA256      = $item.sha256_hash
        SHA1        = $item.sha1_hash
        MD5         = $item.md5_hash
        firstSeen   = $item.first_seen
        origCountry = $item.origin_country
        name        = $item.file_name
        type        = $item.file_type
        source      = "MalwareBazzar"
        }

        $exists = Invoke-SqliteQuery -DataSource $databasePath -Query "SELECT SHA256 FROM HASHES WHERE SHA256 = @SHA256 OR SHA1 = @SHA1 OR MD5 = @MD5 " -SqlParameters $parameters
        if (-not $exists) { 
            Invoke-SqliteQuery -DataSource $databasePath -Query "INSERT INTO HASHES (NAME, TYPE, SHA256, SHA1, MD5, FIRST_SEEN, ORIG_COUNTRY, SOURCE) VALUES (@name, @type, @SHA256, @SHA1, @MD5, @firstSeen, @origCountry, @source )" -SqlParameters  $parameters
            $newCount++
        }
    }
    Write-Host "Statistics: $newCount new HASHES " -ForegroundColor Green
}
